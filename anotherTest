{  "cells": [   {    "cell_type": "code",    "execution_count": 55,    "metadata": {     "collapsed": false    },    "outputs": [     {      "name": "stdout",      "output_type": "stream",      "text": [       "DataFrame[id: int, pid: int, title: string, term: string, score: double]\n",       "DataFrame[pid: int, description: string]\n"      ]     }    ],    "source": [     "import findspark\n",     "findspark.init()\n",     "\n",     "spark = SparkSession.builder.appName(\"test\").getOrCreate()\n",     "from pyspark import SparkContext\n",     "from pyspark import SparkConf\n",     "from pyspark.sql import SparkSession\n",     "from pyspark.sql import SQLContext\n",     "from pyspark.sql.types import StructType, StructField\n",     "from pyspark.sql.types import DoubleType,StringType,IntegerType\n",     "\n",     "sc = spark.sparkContext\n",     "sql_sc = SQLContext(sc)\n",     "\n",     "trainSchema = StructType([\n",     "    StructField(\"id\", IntegerType()),\n",     "    StructField(\"pid\", IntegerType()),\n",     "    StructField(\"title\", StringType()),\n",     "    StructField(\"term\", StringType()),\n",     "    StructField(\"score\", DoubleType())\n",     "])\n",     "\n",     "titleSchema = StructType([\n",     "    StructField(\"id\", IntegerType()),\n",     "    StructField(\"pid\", IntegerType()),\n",     "    StructField(\"title\", StringType()),\n",     "    StructField(\"term\", StringType())\n",     "])\n",     "\n",     "testSchema = StructType([\n",     "    StructField(\"pid\", IntegerType()),\n",     "    StructField(\"title\", StringType())\n",     "])\n",     "\n",     "descriptionSchema = StructType([\n",     "    StructField(\"pid\", IntegerType()),\n",     "    StructField(\"description\", StringType())\n",     "])\n",     "\n",     "attrSchema = StructType([\n",     "    StructField(\"pid\", IntegerType()),\n",     "    StructField(\"name\", StringType()),\n",     "    StructField(\"value\", StringType()),\n",     "])\n",     "\n",     "title = sql_sc.read.format(\"com.databricks.spark.csv\").option(\"header\",\"true\").schema(trainSchema).load(\"/Users/yiwang/Documents/YiWang/Ebiz/Task15/train.csv\")\n",     "train = sql_sc.read.format(\"com.databricks.spark.csv\").option(\"header\",\"true\").schema(titleSchema).load(\"/Users/yiwang/Documents/YiWang/Ebiz/Task15/RawTrain.csv\")\n",     "attr = sql_sc.read.format(\"com.databricks.spark.csv\").option(\"header\",\"true\").schema(attrSchema).load(\"/Users/yiwang/Documents/YiWang/Ebiz/Task15/attributes.csv\")\n",     "test = sql_sc.read.format(\"com.databricks.spark.csv\").option(\"header\",\"true\").schema(testSchema).load(\"/Users/yiwang/Documents/YiWang/Ebiz/Task15/test-panda.csv\")\n",     "description = sql_sc.read.format(\"com.databricks.spark.csv\").option(\"header\",\"true\").schema(descriptionSchema).load(\"/Users/yiwang/Documents/YiWang/Ebiz/Task15/product_descriptions.csv\")\n",     "#title= title.drop(title.id)\n",     "print(title)\n",     "print(description)\n",     "\n",     "\n",     "attr.createOrReplaceTempView(\"attr\")\n",     "#get brand, color and material\n",     "brand = sql_sc.sql(\"SELECT pid,value as brand from attr where name = 'MFG Brand Name'\")\n",     "material = sql_sc.sql(\"SELECT pid,value as material from attr where name = 'Material'\")\n",     "color = sql_sc.sql(\"SELECT pid,value as color from attr where name = 'Color Family'\")\n",     "\n",     "#result=train.union(test)\n",     "title=title.join(description, title.pid == description.pid, \"left\").drop(description.pid)\n",     "title=title.join(brand, title.pid == brand.pid, \"left\").drop(brand.pid)\n",     "title=title.join(material, title.pid== material.pid,\"left\").drop(material.pid)\n",     "title=title.join(color, title.pid == color.pid,\"left\").drop(color.pid)\n",     "\n",     "\n"